{"version":3,"sources":["logo.svg","components/leaderboard.jsx","components/nav.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Leaderboard","state","data","componentDidMount","Tabletop","init","key","callback","googleData","console","log","_this","setState","simpleSheet","react_default","a","createElement","className","this","map","leader","FirstName","LastName","Points","Component","Nav","href","target","App","Fragment","nav","leaderboard","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,mVCsDzBC,qNAjDbC,MAAQ,CACNC,KAAM,MAkCRC,kBAAoB,WAClBC,IAASC,KAAK,CACZC,IAAK,+CACLC,SAAU,SAAAC,GACRC,QAAQC,IAAIF,GACZG,EAAKC,SAAS,CACZV,KAAMM,KAGVK,aAAa,6EAxCf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,eACAH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,sBAGJF,EAAAC,EAAAC,cAAA,aACGE,KAAKjB,MAAMC,KAAKiB,IAAI,SAAAC,GACnB,OACEN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAASG,EAAOC,UAAhC,KACAP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAASG,EAAOE,WAElCR,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAASG,EAAOG,OAAhC,KACAT,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAhB,wBAzBMO,cCuBXC,2LAvBX,OACEX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,KAAGU,KAAK,GAAGT,UAAU,gBAArB,mBAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,KACEU,KAAK,8CACLT,UAAU,oBACVU,OAAO,UAEPb,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,8BAfXO,cCgBHI,mLATX,OACEd,EAAAC,EAAAC,cAACF,EAAAC,EAAMc,SAAP,KACEf,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAACe,EAAD,cALUP,aCKEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ac474cc5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\nimport Tabletop from \"tabletop\";\nimport \"./styles.css\";\n\nclass Leaderboard extends Component {\n  state = {\n    data: []\n  };\n  render() {\n    return (\n      <div className=\"container leaderboard\">\n        <h1 className=\"text-center\">Leaderboard</h1>\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Points</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.state.data.map(leader => {\n              return (\n                <tr>\n                  <td>\n                    <span className=\"heavy\">{leader.FirstName} </span>\n                    <span className=\"light\">{leader.LastName}</span>\n                  </td>\n                  <td>\n                    <span className=\"heavy\">{leader.Points} </span>\n                    <span className=\"light\">Points</span>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  componentDidMount = () => {\n    Tabletop.init({\n      key: \"1E-Hxa9pgcvaQXm1oxC13H5TTrgCy8IcZHvXxODIXe9Y\",\n      callback: googleData => {\n        console.log(googleData);\n        this.setState({\n          data: googleData\n        });\n      },\n      simpleSheet: true\n    });\n  };\n}\n\nexport default Leaderboard;\n","import React, { Component } from \"react\";\n\nclass Nav extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark\">\n        <div className=\"container\">\n          <a href=\"\" className=\"navbar-brand\">\n            The Leaderboard\n          </a>\n          <div className=\"navbar-nav\">\n            <a\n              href=\"https://github.com/ggarnhart/EC-Leaderboard\"\n              className=\"nav-item nav-link\"\n              target=\"_blank\"\n            >\n              <h2>\n                <i className=\"fab fa-github\" />\n              </h2>\n            </a>\n          </div>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Nav;\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Leaderboard from \"./components/leaderboard\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Nav from \"./components/nav\";\n\nclass App extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Nav />\n        <Leaderboard />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}